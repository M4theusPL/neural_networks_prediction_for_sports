{"ast":null,"code":"var _jsxFileName = \"/home/mateusz/Documents/Projekt/neural_networks_prediction_for_sports/client/src/components/Country.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Basketball_Data from \"../csvs/basketball_data.csv\";\nimport Football_Data from \"../csvs/football_data.csv\";\nimport Handball_Data from \"../csvs/handball_data.csv\";\nimport Volleyball_Data from \"../csvs/volleyball_data.csv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Country({\n  formData,\n  setFormData\n}) {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const {\n    discipline\n  } = formData;\n  useEffect(() => {\n    const fetchData = async () => {\n      let response;\n      try {\n        if (discipline === \"Football\") {\n          response = await fetch(Football_Data);\n        } else if (discipline === \"Basketball\") {\n          response = await fetch(Basketball_Data);\n        } else if (discipline === \"Handball\") {\n          response = await fetch(Handball_Data);\n        } else if (discipline === \"Volleyball\") {\n          response = await fetch(Volleyball_Data);\n        }\n        const data = await response.text();\n        Papa.parse(data, {\n          header: true,\n          dynamicTyping: true,\n          complete: result => {\n            if (result.data) {\n              const countriesFromCSV = result.data.map(row => row.Opponent);\n              const sortedCountries = countriesFromCSV.sort();\n              setCountries(sortedCountries);\n            }\n          }\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"components\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: countries.map((country, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFormData({\n          ...formData,\n          country\n        }),\n        className: formData.country === country ? \"selected\" : \"\",\n        children: country\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(Country, \"u5xOCJaVOCLA9QSfvEC1BLxOVIw=\");\n_c = Country;\nexport default Country;\nvar _c;\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Basketball_Data","Football_Data","Handball_Data","Volleyball_Data","jsxDEV","_jsxDEV","Country","formData","setFormData","_s","countries","setCountries","discipline","fetchData","response","fetch","data","text","parse","header","dynamicTyping","complete","result","countriesFromCSV","map","row","Opponent","sortedCountries","sort","error","console","className","children","country","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mateusz/Documents/Projekt/neural_networks_prediction_for_sports/client/src/components/Country.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Basketball_Data from \"../csvs/basketball_data.csv\";\nimport Football_Data from \"../csvs/football_data.csv\";\nimport Handball_Data from \"../csvs/handball_data.csv\";\nimport Volleyball_Data from \"../csvs/volleyball_data.csv\";\n\nfunction Country({formData, setFormData}){\n    const [countries, setCountries] = useState([]);\n    const { discipline } = formData;\n\n    useEffect(() => {\n        const fetchData = async () => {\n          let response;\n\n          try {\n            \n            if (discipline === \"Football\"){\n                response = await fetch(Football_Data);\n            }\n            else if (discipline === \"Basketball\") {\n                response = await fetch(Basketball_Data);\n            } else if (discipline === \"Handball\") {\n                response = await fetch(Handball_Data);\n            } else if (discipline === \"Volleyball\") {\n                response = await fetch(Volleyball_Data);\n            } \n            \n            const data = await response.text();\n    \n            Papa.parse(data, {\n              header: true,\n              dynamicTyping: true,\n              complete: (result) => {\n                if (result.data) {\n                  const countriesFromCSV = result.data.map((row) => row.Opponent);\n                  const sortedCountries = countriesFromCSV.sort();\n                  setCountries(sortedCountries);\n                }\n              },\n            });\n          } catch (error) {\n            console.error(\"Error fetching data:\", error);\n          }\n        };\n    \n        fetchData();\n      }, []);\n\n    return(\n        <div className=\"components\">\n            <div className=\"buttons\">\n            {countries.map((country, index) => (\n                <button\n                    key={index}\n                    onClick={() => setFormData({ ...formData, country })}\n                    className={formData.country === country ? \"selected\" : \"\"}\n                >\n            {country}\n          </button>\n        ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Country;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,aAAa,MAAM,2BAA2B;AACrD,OAAOC,aAAa,MAAM,2BAA2B;AACrD,OAAOC,eAAe,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,OAAOA,CAAC;EAACC,QAAQ;EAAEC;AAAW,CAAC,EAAC;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM;IAAEe;EAAW,CAAC,GAAGL,QAAQ;EAE/BT,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAIC,QAAQ;MAEZ,IAAI;QAEF,IAAIF,UAAU,KAAK,UAAU,EAAC;UAC1BE,QAAQ,GAAG,MAAMC,KAAK,CAACd,aAAa,CAAC;QACzC,CAAC,MACI,IAAIW,UAAU,KAAK,YAAY,EAAE;UAClCE,QAAQ,GAAG,MAAMC,KAAK,CAACf,eAAe,CAAC;QAC3C,CAAC,MAAM,IAAIY,UAAU,KAAK,UAAU,EAAE;UAClCE,QAAQ,GAAG,MAAMC,KAAK,CAACb,aAAa,CAAC;QACzC,CAAC,MAAM,IAAIU,UAAU,KAAK,YAAY,EAAE;UACpCE,QAAQ,GAAG,MAAMC,KAAK,CAACZ,eAAe,CAAC;QAC3C;QAEA,MAAMa,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElClB,IAAI,CAACmB,KAAK,CAACF,IAAI,EAAE;UACfG,MAAM,EAAE,IAAI;UACZC,aAAa,EAAE,IAAI;UACnBC,QAAQ,EAAGC,MAAM,IAAK;YACpB,IAAIA,MAAM,CAACN,IAAI,EAAE;cACf,MAAMO,gBAAgB,GAAGD,MAAM,CAACN,IAAI,CAACQ,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,QAAQ,CAAC;cAC/D,MAAMC,eAAe,GAAGJ,gBAAgB,CAACK,IAAI,CAAC,CAAC;cAC/CjB,YAAY,CAACgB,eAAe,CAAC;YAC/B;UACF;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDhB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAER,oBACIR,OAAA;IAAK0B,SAAS,EAAC,YAAY;IAAAC,QAAA,eACvB3B,OAAA;MAAK0B,SAAS,EAAC,SAAS;MAAAC,QAAA,EACvBtB,SAAS,CAACc,GAAG,CAAC,CAACS,OAAO,EAAEC,KAAK,kBAC1B7B,OAAA;QAEI8B,OAAO,EAAEA,CAAA,KAAM3B,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAE0B;QAAQ,CAAC,CAAE;QACrDF,SAAS,EAAExB,QAAQ,CAAC0B,OAAO,KAAKA,OAAO,GAAG,UAAU,GAAG,EAAG;QAAAD,QAAA,EAEjEC;MAAO,GAJKC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKZ,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC9B,EAAA,CAzDQH,OAAO;AAAAkC,EAAA,GAAPlC,OAAO;AA2DhB,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}