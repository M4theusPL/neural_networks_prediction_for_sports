{"ast":null,"code":"var _jsxFileName = \"/home/mateusz/Documents/Projekt/neural_networks_prediction_for_sports/client/src/components/Country.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Country({\n  formData,\n  setFormData\n}) {\n  _s();\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"../../football_data.csv\");\n        const data = await response.text();\n        Papa.parse(data, {\n          header: true,\n          dynamicTyping: true,\n          complete: result => {\n            if (result.data) {\n              const countriesFromCSV = result.data.map(row => row.Opponent);\n              setCountries(countriesFromCSV);\n            }\n          }\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"discipline-component\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: countries.map((country, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFormData({\n          ...formData,\n          country\n        }),\n        className: formData.country === country ? \"selected\" : \"\",\n        children: country\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(Country, \"u5xOCJaVOCLA9QSfvEC1BLxOVIw=\");\n_c = Country;\nexport default Country;\nvar _c;\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"names":["React","Papa","jsxDEV","_jsxDEV","Country","formData","setFormData","_s","countries","setCountries","useState","useEffect","fetchData","response","fetch","data","text","parse","header","dynamicTyping","complete","result","countriesFromCSV","map","row","Opponent","error","console","className","children","country","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mateusz/Documents/Projekt/neural_networks_prediction_for_sports/client/src/components/Country.js"],"sourcesContent":["import React from \"react\";\nimport Papa from \"papaparse\";\n\nfunction Country({formData, setFormData}){\n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          try {\n            const response = await fetch(\"../../football_data.csv\");\n            const data = await response.text();\n    \n            Papa.parse(data, {\n              header: true,\n              dynamicTyping: true,\n              complete: (result) => {\n                if (result.data) {\n                  const countriesFromCSV = result.data.map((row) => row.Opponent);\n                  setCountries(countriesFromCSV);\n                }\n              },\n            });\n          } catch (error) {\n            console.error(\"Error fetching data:\", error);\n          }\n        };\n    \n        fetchData();\n      }, []);\n\n    return(\n        <div className=\"discipline-component\">\n            {/* <input type=\"text\" placeholder=\"Discipline...\" \n            value={formData.discipline} \n            onChange={(event) => setFormData({ ...formData, discipline: event.target.value })} /> */}\n            <div>\n            {countries.map((country, index) => (\n          <button\n            key={index}\n            onClick={() => setFormData({ ...formData, country })}\n            className={formData.country === country ? \"selected\" : \"\"}\n          >\n            {country}\n          </button>\n        ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Country;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,OAAOA,CAAC;EAACC,QAAQ;EAAEC;AAAW,CAAC,EAAC;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,CAAC;QACvD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElCf,IAAI,CAACgB,KAAK,CAACF,IAAI,EAAE;UACfG,MAAM,EAAE,IAAI;UACZC,aAAa,EAAE,IAAI;UACnBC,QAAQ,EAAGC,MAAM,IAAK;YACpB,IAAIA,MAAM,CAACN,IAAI,EAAE;cACf,MAAMO,gBAAgB,GAAGD,MAAM,CAACN,IAAI,CAACQ,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,QAAQ,CAAC;cAC/DhB,YAAY,CAACa,gBAAgB,CAAC;YAChC;UACF;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDd,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAER,oBACIT,OAAA;IAAKyB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,eAIjC1B,OAAA;MAAA0B,QAAA,EACCrB,SAAS,CAACe,GAAG,CAAC,CAACO,OAAO,EAAEC,KAAK,kBAChC5B,OAAA;QAEE6B,OAAO,EAAEA,CAAA,KAAM1B,WAAW,CAAC;UAAE,GAAGD,QAAQ;UAAEyB;QAAQ,CAAC,CAAE;QACrDF,SAAS,EAAEvB,QAAQ,CAACyB,OAAO,KAAKA,OAAO,GAAG,UAAU,GAAG,EAAG;QAAAD,QAAA,EAEzDC;MAAO,GAJHC,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKJ,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC7B,EAAA,CA7CQH,OAAO;AAAAiC,EAAA,GAAPjC,OAAO;AA+ChB,eAAeA,OAAO;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}