{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import Papa from\"papaparse\";import Football_Data from\"../csvs/football_data.csv\";import{jsx as _jsx}from\"react/jsx-runtime\";function Country(_ref){let{formData,setFormData}=_ref;const[countries,setCountries]=useState([]);const{discipline}=formData;useEffect(()=>{const fetchData=async()=>{let response;try{if(discipline===\"Football\"){response=await fetch(Football_Data);}// else if (country === \"Basketball\") {\n//     response = await fetch(Basketball_Data);\n// } else if (country === \"Handball\") {\n//     response = await fetch(Handball_Data);\n// } else if (country === \"Volleyball\") {\n//     response = await fetch(Volleyball_Data);\n// } \nconst data=await response.text();Papa.parse(data,{header:true,dynamicTyping:true,complete:result=>{if(result.data){const countriesFromCSV=result.data.map(row=>row.Opponent);const sortedCountries=countriesFromCSV.sort();setCountries(sortedCountries);}}});}catch(error){console.error(\"Error fetching data:\",error);}};fetchData();},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"components\",children:/*#__PURE__*/_jsx(\"div\",{className:\"buttons\",children:countries.map((country,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>setFormData({...formData,country}),className:formData.country===country?\"selected\":\"\",children:country},index))})});}export default Country;","map":{"version":3,"names":["React","useState","useEffect","Papa","Football_Data","jsx","_jsx","Country","_ref","formData","setFormData","countries","setCountries","discipline","fetchData","response","fetch","data","text","parse","header","dynamicTyping","complete","result","countriesFromCSV","map","row","Opponent","sortedCountries","sort","error","console","className","children","country","index","onClick"],"sources":["/home/mateusz/Documents/Projekt/neural_networks_prediction_for_sports/client/src/components/Country.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Football_Data from \"../csvs/football_data.csv\";\n\nfunction Country({formData, setFormData}){\n    const [countries, setCountries] = useState([]);\n    const { discipline } = formData;\n\n    useEffect(() => {\n        const fetchData = async () => {\n          let response;\n\n          try {\n            \n            if (discipline === \"Football\"){\n                response = await fetch(Football_Data);\n            }\n            \n\n            // else if (country === \"Basketball\") {\n            //     response = await fetch(Basketball_Data);\n            // } else if (country === \"Handball\") {\n            //     response = await fetch(Handball_Data);\n            // } else if (country === \"Volleyball\") {\n            //     response = await fetch(Volleyball_Data);\n            // } \n            \n            const data = await response.text();\n    \n            Papa.parse(data, {\n              header: true,\n              dynamicTyping: true,\n              complete: (result) => {\n                if (result.data) {\n                  const countriesFromCSV = result.data.map((row) => row.Opponent);\n                  const sortedCountries = countriesFromCSV.sort();\n                  setCountries(sortedCountries);\n                }\n              },\n            });\n          } catch (error) {\n            console.error(\"Error fetching data:\", error);\n          }\n        };\n    \n        fetchData();\n      }, []);\n\n    return(\n        <div className=\"components\">\n            <div className=\"buttons\">\n            {countries.map((country, index) => (\n                <button\n                    key={index}\n                    onClick={() => setFormData({ ...formData, country })}\n                    className={formData.country === country ? \"selected\" : \"\"}\n                >\n            {country}\n          </button>\n        ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Country;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,IAAI,KAAM,WAAW,CAC5B,MAAO,CAAAC,aAAa,KAAM,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtD,QAAS,CAAAC,OAAOA,CAAAC,IAAA,CAAyB,IAAxB,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAAF,IAAA,CACpC,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAAEY,UAAW,CAAC,CAAGJ,QAAQ,CAE/BP,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAY,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CAAAC,QAAQ,CAEZ,GAAI,CAEF,GAAIF,UAAU,GAAK,UAAU,CAAC,CAC1BE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACZ,aAAa,CAAC,CACzC,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAAAa,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAElCf,IAAI,CAACgB,KAAK,CAACF,IAAI,CAAE,CACfG,MAAM,CAAE,IAAI,CACZC,aAAa,CAAE,IAAI,CACnBC,QAAQ,CAAGC,MAAM,EAAK,CACpB,GAAIA,MAAM,CAACN,IAAI,CAAE,CACf,KAAM,CAAAO,gBAAgB,CAAGD,MAAM,CAACN,IAAI,CAACQ,GAAG,CAAEC,GAAG,EAAKA,GAAG,CAACC,QAAQ,CAAC,CAC/D,KAAM,CAAAC,eAAe,CAAGJ,gBAAgB,CAACK,IAAI,CAAC,CAAC,CAC/CjB,YAAY,CAACgB,eAAe,CAAC,CAC/B,CACF,CACF,CAAC,CAAC,CACJ,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAEDhB,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAER,mBACIR,IAAA,QAAK0B,SAAS,CAAC,YAAY,CAAAC,QAAA,cACvB3B,IAAA,QAAK0B,SAAS,CAAC,SAAS,CAAAC,QAAA,CACvBtB,SAAS,CAACc,GAAG,CAAC,CAACS,OAAO,CAAEC,KAAK,gBAC1B7B,IAAA,WAEI8B,OAAO,CAAEA,CAAA,GAAM1B,WAAW,CAAC,CAAE,GAAGD,QAAQ,CAAEyB,OAAQ,CAAC,CAAE,CACrDF,SAAS,CAAEvB,QAAQ,CAACyB,OAAO,GAAKA,OAAO,CAAG,UAAU,CAAG,EAAG,CAAAD,QAAA,CAEjEC,OAAO,EAJKC,KAKP,CACT,CAAC,CACO,CAAC,CACL,CAAC,CAEd,CAEA,cAAe,CAAA5B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}